#!/usr/bin/with-contenv bash

# Create folders
mkdir -p /config/letsencrypt
mkdir -p /config/letsencrypt/current

# Create symlink for letsencrypt
rm -rf /etc/letsencrypt
ln -s /config/letsencrypt /etc/letsencrypt

# make sure all environment variables are lower case
CERTBOT_DOMAIN=$(echo "${CERTBOT_DOMAIN,,}")
CERTBOT_SUBDOMAINS=$(echo "${CERTBOT_SUBDOMAINS,,}")
CERTBOT_OTHER_DOMAINS=$(echo "${CERTBOT_OTHER_DOMAINS,,}")
CERTBOT_EMAIL=$(echo "${CERTBOT_EMAIL,,}")
CERTBOT_STAGING=$(echo "${CERTBOT_STAGING,,}")

# check if CERTBOT_DOMAIN was provided and format all parameters
if [[ ! $CERTBOT_DOMAIN == *.* ]]; then
  echo "ERROR: No domain provided, can not continue with certbot! Make sure the \"CERTBOT_DOMAIN\" parameter is provided." && \
  sleep infinity
fi

# Read current config if available
if [[ -f /config/letsencrypt/certbot.conf ]]; then
    source /config/letsencrypt/certbot.conf
fi
if [[ ! -n $CERT_REVOKE_STAGING ]]; then
    CERT_REVOKE_STAGING=$CERTBOT_STAGING
fi

# Create temp config file to compare config
echo "CERT_DOMAIN=${CERTBOT_DOMAIN}
CERT_SUBDOMAINS=${CERTBOT_SUBDOMAINS}
CERT_OTHER_DOMAINS=${CERTBOT_OTHER_DOMAINS}
CERT_EMAIL=${CERTBOT_EMAIL}
CERT_STAGING=${CERTBOT_STAGING}
CERT_REVOKE_STAGING=${CERT_REVOKE_STAGING}
" > "/config/letsencrypt/certbot_tmp.conf"


# Check if certbot input variables changed
CERTBOT_STATUS="$(cmp -s /config/letsencrypt/certbot.conf /config/letsencrypt/certbot_tmp.conf; echo $?)"
if [[ $CERTBOT_STATUS -ne 0 ]]; then 
    echo "**** Certbot config has changed, prepare new certificate ****"
    # Update certbot configuration
    mv -f /config/letsencrypt/certbot_tmp.conf  /config/letsencrypt/certbot.conf
else
    rm /config/letsencrypt/certbot_tmp.conf
fi

# Check if live folder contains certificate folder
if [[ -f "/config/letsencrypt/live/${CERTBOT_DOMAIN}/cert.pem" ]]; then 
    CERTIFICATE_EXISTS=true
else
    CERTIFICATE_EXISTS=false
fi

# If certificate does not exists or a new config is available perform renew
if [[ $CERTBOT_STATUS -ne 0 ]] || [[ $CERTIFICATE_EXISTS = false ]]; then
    
    echo "**** Requesting new certificate from LetsEncrypt ****"
    
    # Remove existing certs from live, archive and renewal folder
    if [[ -n $CERT_DOMAIN ]]; then
        rm -Rf /config/letsencrypt/live/$CERT_DOMAIN/
    fi
    rm -Rf /config/letsencrypt/archive/*
    rm -f /config/letsencrypt/renewal/*
    rm -f /config/letsencrypt/csr/*
    rm -f /config/letsencrypt/keys/*

    # Create temp certificate to avoid nginx chrash as no certificate is available
    if [[ ! -f "/config/letsencrypt/current/privkey.pem" ]]; then
        openssl req -new -x509 -days 365 -nodes \
            -out /config/letsencrypt/current/fullchain.pem \
            -keyout /config/letsencrypt/current/privkey.pem \
            -subj "/C=DE/CN=flo-mic-secure-proxy.com" > /dev/null 2>&1
            sleep 1
    fi

    echo "Domain: ${CERTBOT_DOMAIN}"
    REQUEST_DOMAINS="-d ${CERTBOT_DOMAIN}"
    
    # Add subdomains to request string
    if [ -n "$CERTBOT_SUBDOMAINS" ]; then
        CERTBOT_SUBDOMAINS="${CERTBOT_SUBDOMAINS// /,}"
        CERTBOT_SUBDOMAINS="${CERTBOT_SUBDOMAINS//,,/,}"
        for i in $(echo $CERTBOT_SUBDOMAINS | sed "s/,/ /g")
        do
            echo "Subdomain: ${i}.${CERTBOT_DOMAIN}"
            REQUEST_DOMAINS="${REQUEST_DOMAINS} -d ${i}.${CERTBOT_DOMAIN}"
        done
    fi

     # Add other domains to request string
    if [ -n "$CERTBOT_OTHER_DOMAINS" ]; then
        CERTBOT_OTHER_DOMAINS="${CERTBOT_OTHER_DOMAINS// /,}"
        CERTBOT_OTHER_DOMAINS="${CERTBOT_OTHER_DOMAINS//,,/,}"
        for i in $(echo $CERTBOT_OTHER_DOMAINS | sed "s/,/ /g")
        do
            echo "Other domain: ${i}"
            REQUEST_DOMAINS="${REQUEST_DOMAINS} -d ${i}"
        done
    fi

    # check and validate email
    if [[ $CERTBOT_EMAIL == *@*.* ]]; then
        echo "E-mail: ${CERTBOT_EMAIL}"
        REQUEST_EMAIL="--email ${CERTBOT_EMAIL} --no-eff-email"
    else
        echo "No e-mail address provided or address is invalid!"
        REQUEST_EMAIL="--register-unsafely-without-email"
    fi

    REQUEST_PARAMETERS="--renew-by-default --webroot -w /config/www --non-interactive --preferred-challenges http \
        --logs-dir /config/logs/letsencrypt --rsa-key-size 4096 --agree-tos"
    
    # Request certificate
    shopt -s nocasematch
    if [[ ${CERTBOT_STAGING} = "true" ]]; then
        echo "Staging: true"
        REQUEST_PARAMETERS="${REQUEST_PARAMETERS} --staging"
    else
        echo "Staging: false"
    fi
    
    # Start nginx for letsencrypt
    echo "**** Starting temporary nginx instance for certbot ****"
    nohup ./etc/services.d/nginx/run &
    sleep 1

    # Request certificate by certbot
    certbot certonly $REQUEST_PARAMETERS $REQUEST_EMAIL  $REQUEST_DOMAINS

    # Kill nginx to avoid issues with s6 service
    echo "**** Stopping temporary nginx instance ****"
    if pgrep -f "[n]ginx:" > /dev/null; then
        pkill -f [n]ginx:
        sleep 1
    fi
    if pgrep -f "[n]ginx:" > /dev/null; then
        echo "Nginx  still active, sending SIGKILL"
        pkill -9 -f [n]ginx:
        sleep 1
    fi

    # Check that certificate was created succesfully
    if [[ -f "/config/letsencrypt/live/${CERTBOT_DOMAIN}/cert.pem" ]]; then 
        #Update current certificate
        cd "/config/letsencrypt/live/${CERTBOT_DOMAIN}/"
        openssl pkcs12 -export -out privkey.pfx -inkey privkey.pem -in cert.pem -certfile chain.pem -passout pass:
        sleep 1
        cat {privkey,fullchain}.pem > priv-fullchain-bundle.pem

        # Revoke and remove old certificate
        if [[ -f /config/letsencrypt/current/cert.pem ]]; then
            shopt -s nocasematch
            if [[ ${CERT_REVOKE_STAGING} = "true" ]]; then
                certbot revoke --non-interactive --cert-path /config/letsencrypt/current/fullchain.pem --staging
            else
                certbot revoke --non-interactive --cert-path /config/letsencrypt/current/fullchain.pem
            fi
        fi
        # Update revoke staging var in conf file
        sed -i "s/CERT_REVOKE_STAGING=${CERT_REVOKE_STAGING}/CERT_REVOKE_STAGING=${STAGING}/" /config/letsencrypt/certbot.conf
        
        # Copy new files to current cert directory
        rm -f /config/letsencrypt/current/*
        cp /config/letsencrypt/live/$CERTBOT_DOMAIN/* /config/letsencrypt/current/

    else
        if [[ -f "/config/letsencrypt/current/privkey.pem" ]]; then 
            echo "ERROR: Certbot failed, use old certificate until this is fixed. Please check your input parameters to get a new certificate."
        else
            echo "ERROR: Certbot failed and no existing certificate available. Fix the issue by checking the parameters, port and firewall settings. Restart the container to request a new certificate."
            sleep infinity
        fi
    fi
else
# Check if current certificate needs to be renewed
    if openssl x509 -in /config/letsencrypt/current/fullchain.pem -noout -checkend 86400 >/dev/null; then 
        echo "" > /dev/null 
    else
        echo "**** Certbot will renew the certificate now, this can take some minutes ****"
        chmod +x /etc/scripts.d/renew-letsencrypt.sh
        /etc/scripts.d/renew-letsencrypt.sh
        sleep 1
    fi
fi
