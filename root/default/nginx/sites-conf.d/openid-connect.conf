# This configuration contains a lua script to perform openid-connect authentications for SSO

# it will be available in all sites if you include one of the following two examples inside your server block
# The first example is the best as it loads all "*.conf" files from the directory
# The second line only loads this specific config file, replace "filename.conf" with the filename of this file
# Make sure to remove the leading "#" from the specific line

# Examples for server block
# include /config/nginx/sites-conf.d/*.conf;
# include /config/nginx/sites-conf.d/filename.conf;

# Preset variable oidc to avoid errors due to uninitialized variabe
set $oidc_enabled "false";

# Lua rule for OpenID Connect authentication
access_by_lua '

    if ngx.var.oidc_enabled == "true" then
        local opts = {
            redirect_uri = ngx.var.scheme .. "://" .. ngx.var.server_name .. "/redirect_uri",
            accept_none_alg = true,
            discovery = ngx.var.oidc_discovery_url,
            client_id = ngx.var.oidc_client_id,
            client_secret = ngx.var.oidc_client_secret,
            ssl_verify = "yes",
            logout_path = ngx.var.oidc_logout_path,
            post_logout_redirect_uri = ngx.var.oidc_post_logout_redirect_uri,
            revoke_tokens_on_logout = true,
            redirect_after_logout_with_id_token_hint = false,
            scope = "openid email profile",
            session_contents = {id_token=true},
            renew_access_token_on_expiry = true,
            access_token_expires_in = 600,
            refresh_session_interval = 300
        }
        -- call introspect for OAuth 2.0 Bearer Access Token validation
        local oidc = require("resty.openidc")
        local res, err, _, session = oidc.authenticate(opts)
        
        if err then
            ngx.status = 403
            ngx.say(err)
            ngx.exit(ngx.HTTP_FORBIDDEN)
        end
        session:hide() 
    end
    ';	